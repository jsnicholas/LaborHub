<!--MAKE A PAYMENT-->
<div class="card makepayment">
  <div class="card-header">
    <div class="card-title h5">Upcoming Payments</div>
    <div class="card-subtitle">Total ${{Dates.amount}} due by {{Dates.due_date}}</div>
  </div>
  <div class="card-body">
    <p>Make a payment:</p>
  </div>
  <div class="card-footer">

    <button class="btn btn-success"><i class="fa-regular fa-money-bill" style="color: #EBEBEBff;"></i>Pay Now</button>

    <button class="btn btn-primary"><i class="fa-regular fa-money-bill" style="color: #EBEBEBff;"></i>Pay Now</button>
    <script data-sdk-integration-source="integrationbuilder_ac"></script>
    <div id="paypal-button-container"></div>
    <script src="https://www.paypal.com/sdk/js?client-id=<test>"></script>
    <script>
      const FUNDING_SOURCES = [
        paypal.FUNDING.PAYPAL,
        paypal.FUNDING.CARD
      ];
      FUNDING_SOURCES.forEach(fundingSource => {
        paypal.Buttons({
          fundingSource,
          style: {
            layout: 'vertical',
            shape: 'rect',
            color: (fundingSource==paypal.FUNDING.PAYLATER) ? 'gold' : '',
          },
          createOrder: async (data, actions) => {
            const response = await fetch("/orders", {
              method: "POST",
            });
            const details = await response.json();
            return details.id;
          },
          
          onApprove: async (data, actions) => {
            const response = await fetch(`/orders/${data.orderID}/capture`, {
              method: "POST",
            });
            const details = await response.json();
            // Three cases to handle:
            //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
            //   (2) Other non-recoverable errors -> Show a failure message
            //   (3) Successful transaction -> Show confirmation or thank you

        

            const errorDetail = Array.isArray(details.details) && details.details[0];
            if (errorDetail && errorDetail.issue === 'INSTRUMENT_DECLINED') {
              return actions.restart(); // Recoverable state, per:
              // https://developer.paypal.com/docs/checkout/integration-features/funding-failure/
            }

            if (errorDetail) {
              let msg = 'Sorry, your transaction could not be processed.';
              if (errorDetail.description) msg += '\n\n' + errorDetail.description;
              if (details.debug_id) msg += ' (' + details.debug_id + ')';
              return alert(msg); // Show a failure message 
            }

            // Successful capture! For demo purposes:
            console.log('Capture result', details, JSON.stringify(details, null, 2));
            const transaction = details.purchase_units[0].payments.captures[0];
            alert('Transaction '+ transaction.status + ': ' + transaction.id + '\n\nSee console for all available details');
          },
        })
        .render("#paypal-button-container");
       })

    </script>

  </div>
</div>
<!--PAYMENT HISTORY-->
<div class="card payhistory">
  <div class="card-header">
    <div class="card-title text-center h5">Your Payment History</div>
  </div>
  <div class="card-body">
    <table class="table payhisttable">
      <thead>
        <tr>
          <th>Date</th>
          <th>Dues Paid</th>
        </tr>
      </thead>
      <tbody>
        <tr class="active">
          {{#if PayHist.paid === true}}
            {{#each PayHist}}
            <td>{{due_date}}</td>
            <td class="paiddues">Paid.</td>
            {{/each}}
          {{else}}
            {{#each PayHist}}
            <td  class="missedpayment">{{due_date}}</td>
            <td class="missedpayment">Missed payment. Please contact your representative.</td>
            {{/each}}
          {{/if}}
        </tr>
      </tbody>
    </table>


    </ul>
  </div>
</div>